{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","loadData","a","getData","res","getTimeline","timeline","console","log","data","myData","sort","b","name","localeCompare","map","item","i","opt","forEach","element","dropDownEle","label","value","code","push","setState","items","options","state","selected","selectedOption","handleChange","bind","handleChange_Country","this","Promise","resolve","axios","get","then","event","target","id","latest_data","nStr","x","split","x1","x2","length","rgx","test","replace","date","moment","format","className","style","color","backgroundColor","paddingTop","paddingBottom","formatDate","Date","Container","fontSize","Card","Header","Body","Row","Col","textAlign","paddingRight","xs","lg","paddingLeft","Badge","variant","addCommas","confirmed","new_confirmed","deaths","new_deaths","recovered","new_recovered","sm","FormGroup","width","isMulti","onChange","sortBy","default","overflowY","flex","list","idx","md","population","toFixed","today","calculated","death_rate","recovery_rate","some","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7475967d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Badge, Card, Col, Container, Form, FormGroup, Row } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Select from 'react-select';\n\n  class App extends Component {  \n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        items: [],\n        selected: \"All\",\n        options: [],\n        selectedOption: [],\n        timeline: [],\n      }\n      this.handleChange = this.handleChange.bind(this);\n      this.handleChange_Country = this.handleChange_Country.bind(this);\n    }\n\n    componentDidMount(){\n      this.loadData()\n    }\n\n    getData(){\n      return new Promise(resolve => {\n         axios.get(\"https://corona-api.com/countries\").then((res) => { resolve(res.data); })\n      })\n    }\n\n    getTimeline(){\n      return new Promise(resolve => {\n         axios.get(\"https://corona-api.com/timeline\").then((res) => { resolve(res.data); })\n      })\n    }\n    \n    loadData  = async () => {\n      const res = await this.getData();\n      const timeline = await this.getTimeline();\n      console.log(res)\n      console.log(res.data)\n      console.log(timeline.data)\n      let myData = res.data\n\n      // myData.push({name: \"All\"})\n      myData.sort((a, b) => a.name.localeCompare(b.name))\n      .map((item, i) => { \n        return item;\n        \n      });\n\n      let opt = [];\n      myData.forEach((element,i) => {\n        let dropDownEle = { label: element.name, value: element.code };\n        opt.push(dropDownEle);\n      });\n\n      this.setState({items: myData, options: opt, timeline})\n      console.log(myData)\n    }\n\n    handleChange(event){\n      this.setState({[event.target.id]: event.target.value});\n      if(event.target.id === \"sortBy\"){\n        let myData = this.state.items.sort((a, b) => { \n          // console.log(a.name,b.name,a.latest_data[event.target.value],b.latest_data[event.target.value])\n          // if(a.latest_data && b.latest_data && a.latest_data[event.target.value] && b.latest_data[event.target.value])\n          return b.latest_data[event.target.value] - a.latest_data[event.target.value]\n          // else\n          // return 0;\n        } )\n        .map((item, i) => item);\n        console.log(myData)\n        this.setState({items: myData, selected: \"All\"})\n      }\n      if(event.target.value === \"countries\"){\n        let myData = this.state.items.sort((a, b) => a.name.localeCompare(b.name))\n        .map((item, i) => item);\n        this.setState({items: myData})\n      }\n    }\n    handleChange_Country(event){\n      console.log(event)\n      \n      if(event)\n        this.setState({selected: event.label, selectedOption: event});  \n      else\n        this.setState({selected: \"All\", selectedOption: []}); \n    }\n    \n    addCommas(nStr){\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n       x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n      return x1 + x2;\n     }\n\n     formatDate(date){\n      return moment(date).format('DD-MMM-YYYY LTS');\n     }\n\n  render() {\n  return (\n    <div className=\"container\">\n      <header className=\"App-header\">\n        <div className=\"jumbotron\" style={{color: 'white', backgroundColor: 'darkslategray', paddingTop: '15px', paddingBottom: '15px'}}>\n          {/* <div className=\"row\" style={{color: 'black'}}> */}\n        <p>\n          COVID19 updates as of {this.formatDate(new Date())}\n        </p>\n        <Container style={{color: 'darkblue', fontSize: 'initial', paddingBottom: '15px'}}>\n          <Card>\n            <Card.Header>Worldwide</Card.Header>\n            <Card.Body>\n              <Row>\n                <Col style={{ textAlign: 'right', paddingRight: '5px'}} xs='5' lg='6'>\n                  <div>Confirmed:</div>\n                </Col>\n                <Col style={{textAlign: 'left', paddingRight: '0px', paddingLeft: '0px'}}>\n                  <div> <Badge variant=\"warning\">{this.addCommas(this.state.timeline && this.state.timeline.data && this.state.timeline.data[0].confirmed)}</Badge>\n                  {this.state.timeline && this.state.timeline.data  && this.state.timeline.data[0].new_confirmed > 0 && <Badge variant=\"secondary\"> +{this.addCommas(this.state.timeline.data[0].new_confirmed)}</Badge>}\n                </div>\n                </Col>\n              </Row> \n              <Row>\n                <Col style={{ textAlign: 'right', paddingRight: '5px'}} xs='5' lg='6'>\n                  <div>Deaths:</div>\n                </Col>\n                <Col style={{textAlign: 'left', paddingRight: '0px', paddingLeft: '0px'}}>\n                  <div>\n                    <Badge variant=\"danger\">{this.addCommas(this.state.timeline && this.state.timeline.data && this.state.timeline.data[0].deaths)}</Badge>\n                    {this.state.timeline && this.state.timeline.data  && this.state.timeline.data[0].new_deaths > 0 && <Badge variant=\"secondary\"> +{this.addCommas(this.state.timeline.data[0].new_deaths)}</Badge>}\n                  </div>\n                </Col>\n              </Row>\n              <Row>\n                <Col style={{ textAlign: 'right', paddingRight: '5px'}} xs='5' lg='6'>\n                  <div>Recovered:</div>\n                </Col>\n                <Col style={{textAlign: 'left', paddingRight: '0px', paddingLeft: '0px'}}>\n                  <div>\n                    <Badge variant=\"success\">{this.addCommas(this.state.timeline && this.state.timeline.data && this.state.timeline.data[0].recovered)}</Badge>\n                    {this.state.timeline && this.state.timeline.data  && this.state.timeline.data[0].new_recovered > 0 && <Badge variant=\"secondary\"> +{this.addCommas(this.state.timeline.data[0].new_recovered)}</Badge>}\n                  </div>\n                </Col>\n              </Row>\n                \n            </Card.Body>\n          </Card>\n        </Container>\n        <Row>\n          <Col lg='6' sm='12'>\n        <FormGroup style={{width: '-webkit-fill-available'}}>\n          <label>Countries</label>\n          <span style={{color: 'blue'}}><Select isMulti options={this.state.options} id=\"selected\" onChange={this.handleChange_Country} value={this.state.selectedOption} /></span>\n        </FormGroup>\n        </Col>\n        <Col lg='6' sm='12'>\n        <FormGroup style={{width: '-webkit-fill-available'}}>\n          <label>Sort by</label>\n          <select value={this.state.sortBy} id=\"sortBy\" onChange={this.handleChange} style={{width: '-webkit-fill-available'}}>\n            <option value=\"confirmed\" >confirmed</option>\n            <option value=\"deaths\" >deaths</option>\n            <option value=\"recovered\">recovered</option> \n            <option default value=\"countries\">countries</option>\n          </select>\n        </FormGroup>\n        </Col>\n        </Row>\n        \n        \n        {/* </div> */}\n        </div>\n      </header> \n        <div style={{overflowY: 'scroll', flex: 1}}> \n        {this.state.selected === \"All\" ?\n        <Card>\n        {this.state.items.map((list,idx) => {\n          if(list.latest_data)\n          return (\n            <Container style={{paddingBottom: '15px'}}>\n              <Card>\n                <Card.Header>{list.name}</Card.Header>\n                <Card.Body>\n                  <Row>\n                    <Col style={{ textAlign: 'right', paddingLeft: '0px'}}  xs='7' lg='6' md='6'>\n                      <div>\n                        Confirmed {' '}\n                        <label>({(list.latest_data.confirmed && list.latest_data.confirmed / list.population * 100).toFixed(3)}%)</label>\n                      </div>\n                    </Col>\n                    <Col style={{textAlign: 'left', paddingRight: '0px'}}>\n                      <div> \n                        <Badge variant=\"warning\">{this.addCommas(list.latest_data.confirmed)}</Badge>\n                        {list.today.confirmed > 0 && <Badge variant=\"secondary\"> +{this.addCommas(list.today.confirmed)}</Badge>}\n                      </div>\n                    </Col>\n                  </Row> \n                  <Row>\n                    <Col style={{ textAlign: 'right', paddingLeft: '0px'}}  xs='7' lg='6' md='6'>\n                      <div>Deaths {' '}\n                      <label> ({list.latest_data.calculated.death_rate && list.latest_data.calculated.death_rate.toFixed(2) }%)</label>\n                      </div>\n                    </Col>\n                    <Col style={{textAlign: 'left', paddingRight: '0px'}}>\n                      <div>\n                        <Badge variant=\"danger\">{this.addCommas(list.latest_data.deaths)}</Badge>\n                        {list.today.deaths > 0 && <Badge variant=\"secondary\"> +{list.today.deaths}</Badge>}\n                      </div>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col style={{ textAlign: 'right', paddingLeft: '0px'}} xs='7' lg='6' md='6'>\n                      <div>Recovered {' '}\n                      <label> ({list.latest_data.calculated.recovery_rate && list.latest_data.calculated.recovery_rate.toFixed(2) }%)</label>\n                      </div>\n                    </Col>\n                    <Col style={{textAlign: 'left', paddingRight: '0px'}}>\n                      <div>\n                        <Badge variant=\"success\">{this.addCommas(list.latest_data.recovered)}</Badge>\n                        {list.today.recovered > 0 && <Badge variant=\"secondary\"> +{list.today.recovered}</Badge>}\n                      </div>\n                    </Col>\n                  </Row>\n                </Card.Body>\n              </Card>\n            </Container>\n            \n            );\n        })}\n      </Card>\n      :\n      <div>\n      {this.state.items.map((list,idx) => {\n        \n        if(this.state.selectedOption.some(x => x.label === list.name)){\n          console.log(list)\n          return (\n              <Container style={{paddingBottom: '15px'}}>\n              <Card>\n                <Card.Header>{list.name}</Card.Header>\n                <Card.Body>\n                  <Row>\n                    <Col style={{ textAlign: 'right', paddingLeft: '0px'}}  xs='7' lg='6' md='6'>\n                      <div>\n                        Confirmed {' '}\n                        <label>({(list.latest_data.confirmed && list.latest_data.confirmed / list.population * 100).toFixed(3)}%)</label>\n                      </div>\n                    </Col>\n                    <Col style={{textAlign: 'left', paddingRight: '0px'}}>\n                      <div> \n                        <Badge variant=\"warning\">{this.addCommas(list.latest_data.confirmed)}</Badge>\n                        {list.today.confirmed > 0 && <Badge variant=\"secondary\"> +{this.addCommas(list.today.confirmed)}</Badge>}\n                      </div>\n                    </Col>\n                  </Row> \n                  <Row>\n                    <Col style={{ textAlign: 'right', paddingLeft: '0px'}}  xs='7' lg='6' md='6'>\n                      <div>Deaths {' '}\n                      <label> ({list.latest_data.calculated.death_rate && list.latest_data.calculated.death_rate.toFixed(2) }%)</label>\n                      </div>\n                    </Col>\n                    <Col style={{textAlign: 'left', paddingRight: '0px'}}>\n                      <div>\n                        <Badge variant=\"danger\">{this.addCommas(list.latest_data.deaths)}</Badge>\n                        {list.today.deaths > 0 && <Badge variant=\"secondary\"> +{this.addCommas(list.today.deaths)}</Badge>}\n                      </div>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col style={{ textAlign: 'right', paddingLeft: '0px'}} xs='7' lg='6' md='6'>\n                      <div>Recovered {' '}\n                      <label> ({list.latest_data.calculated.recovery_rate && list.latest_data.calculated.recovery_rate.toFixed(2) }%)</label>\n                      </div>\n                    </Col>\n                    <Col style={{textAlign: 'left', paddingRight: '0px'}}>\n                      <div>\n                        <Badge variant=\"success\">{this.addCommas(list.latest_data.recovered)}</Badge>\n                        {list.today.recovered > 0 && <Badge variant=\"secondary\"> +{this.addCommas(list.today.recovered)}</Badge>}\n                      </div>\n                    </Col>\n                  </Row>\n                    \n                </Card.Body>\n              </Card>\n            </Container>\n            );\n        }else return <div></div>\n        })}\n      </div>\n        }\n      \n      </div>\n      \n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}