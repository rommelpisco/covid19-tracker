{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["confirmed","deaths","recovered","App","props","loadData","a","getData","res","console","log","data","myData","sort","b","name","localeCompare","map","item","i","latest_data","setState","items","state","selected","handleChange","bind","this","Promise","resolve","axios","get","then","event","target","id","value","nStr","x","split","x1","x2","length","rgx","test","replace","date","moment","format","className","formatDate","Date","Container","style","color","fontSize","Card","Header","Body","Row","Col","textAlign","Badge","variant","addCommas","FormGroup","onChange","width","list","sortBy","default","overflowY","flex","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c81a090f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Badge, Card, Col, Container, Form, FormGroup, Row } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nvar confirmed = 0;\nvar deaths = 0;\nvar recovered = 0;\n  class App extends Component {  \n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        items: [],\n        selected: \"All\",\n      }\n      this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount(){\n      this.loadData()\n    }\n\n    getData(){\n      return new Promise(resolve => {\n         axios.get(\"https://corona-api.com/countries\").then((res) => { resolve(res.data); })\n      })\n    }\n    \n    loadData  = async () => {\n      const res = await this.getData();\n      console.log(res)\n      console.log(res.data)\n      let myData = res.data\n      // myData.push({name: \"All\"})\n      myData.sort((a, b) => a.name.localeCompare(b.name))\n      .map((item, i) => { \n        confirmed = confirmed + item.latest_data.confirmed;\n        deaths = deaths + item.latest_data.deaths;\n        recovered = recovered + item.latest_data.recovered;\n        return item;\n        \n      });\n\n      this.setState({items: myData})\n      console.log(myData)\n    }\n\n    handleChange(event){\n      this.setState({[event.target.id]: event.target.value});\n      if(event.target.id === \"sortBy\"){\n        let myData = this.state.items.sort((a, b) => { \n          // console.log(a.name,b.name,a.latest_data[event.target.value],b.latest_data[event.target.value])\n          // if(a.latest_data && b.latest_data && a.latest_data[event.target.value] && b.latest_data[event.target.value])\n          return b.latest_data[event.target.value] - a.latest_data[event.target.value]\n          // else\n          // return 0;\n        } )\n        .map((item, i) => item);\n        console.log(myData)\n        this.setState({items: myData, selected: \"All\"})\n      }\n      if(event.target.value === \"countries\"){\n        let myData = this.state.items.sort((a, b) => a.name.localeCompare(b.name))\n        .map((item, i) => item);\n        this.setState({items: myData})\n      }\n    }\n    \n    addCommas(nStr){\n      nStr += '';\n      var x = nStr.split('.');\n      var x1 = x[0];\n      var x2 = x.length > 1 ? '.' + x[1] : '';\n      var rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n       x1 = x1.replace(rgx, '$1' + ',' + '$2');\n      }\n      return x1 + x2;\n     }\n\n     formatDate(date){\n      return moment(date).format('DD-MMM-YYYY LTS');\n     }\n\n  render() {\n  return (\n    <div className=\"container\">\n      <header className=\"App-header\">\n      \n        <p>\n          COVID19 updates as of {this.formatDate(new Date())}\n        </p>\n        <Container style={{color: 'darkcyan', fontSize: 'initial'}}>\n          <Card>\n            <Card.Header>Worldwide</Card.Header>\n            <Card.Body>\n              <Row>\n                <Col style={{ textAlign: 'right'}}>\n                  <div>Confirmed:</div>\n                </Col>\n                <Col style={{textAlign: 'left'}}>\n                  <div> <Badge variant=\"warning\">{this.addCommas(confirmed)}</Badge></div>\n                </Col>\n              </Row> \n              <Row>\n                <Col style={{ textAlign: 'right'}}>\n                  <div>Deaths:</div>\n                </Col>\n                <Col style={{textAlign: 'left'}}>\n                  <div><Badge variant=\"danger\">{this.addCommas(deaths)}</Badge></div>\n                </Col>\n              </Row>\n              <Row>\n                <Col style={{ textAlign: 'right'}}>\n                  <div>Recovered:</div>\n                </Col>\n                <Col style={{textAlign: 'left'}}>\n                  <div><Badge variant=\"success\">{this.addCommas(recovered)}</Badge></div>\n                </Col>\n              </Row>\n                \n            </Card.Body>\n          </Card>\n        </Container>\n        <Row>\n          <Col>\n        <FormGroup>\n          <label>Countries</label><br></br>\n          <select value={this.state.selected} id=\"selected\" onChange={this.handleChange} style={{width: '150px'}}>\n          {this.state.items.map((list) => {\n            return (<option value={list.name} >{list.name}</option> )\n          })}\n          </select>\n        </FormGroup>\n        </Col>\n        <Col>\n        <FormGroup>\n          <label>Sort by</label><br></br>\n          <select value={this.state.sortBy} id=\"sortBy\" onChange={this.handleChange}>\n            <option value=\"confirmed\" >confirmed</option>\n            <option value=\"deaths\" >deaths</option>\n            <option value=\"recovered\">recovered</option> \n            <option default value=\"countries\">countries</option>\n          </select>\n        </FormGroup>\n        </Col>\n        </Row>\n        \n        <br></br>\n        </header> \n        <div style={{overflowY: 'scroll', flex: 1}}> \n        {this.state.selected === \"All\" ?\n        <Card>\n        {this.state.items.map((list) => {\n          if(list.latest_data)\n          return (\n            <Container>\n              <Card>\n                <Card.Header>{list.name}</Card.Header>\n                <Card.Body>\n                  <Row>\n                    <Col style={{ textAlign: 'right'}}>\n                      <div>Confirmed:</div>\n                    </Col>\n                    <Col style={{textAlign: 'left'}}>\n                      <div> <Badge variant=\"warning\">{this.addCommas(list.latest_data.confirmed)}</Badge></div>\n                    </Col>\n                  </Row> \n                  <Row>\n                    <Col style={{ textAlign: 'right'}}>\n                      <div>Deaths:</div>\n                    </Col>\n                    <Col style={{textAlign: 'left'}}>\n                      <div><Badge variant=\"danger\">{this.addCommas(list.latest_data.deaths)}</Badge></div>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col style={{ textAlign: 'right'}}>\n                      <div>Recovered:</div>\n                    </Col>\n                    <Col style={{textAlign: 'left'}}>\n                      <div><Badge variant=\"success\">{this.addCommas(list.latest_data.recovered)}</Badge></div>\n                    </Col>\n                  </Row>\n                </Card.Body>\n              </Card>\n            </Container>\n            \n            );\n        })}\n      </Card>\n      :\n      <div>\n      {this.state.items.map((list) => {\n        if(list.name === this.state.selected){\n          return (\n              <Container>\n              <Card>\n                <Card.Header>{list.name}</Card.Header>\n                <Card.Body>\n                  <Row>\n                    <Col style={{ textAlign: 'right'}}>\n                      <div>Confirmed:</div>\n                    </Col>\n                    <Col style={{textAlign: 'left'}}>\n                      <div> <Badge variant=\"warning\">{this.addCommas(list.latest_data.confirmed)}</Badge></div>\n                    </Col>\n                  </Row> \n                  <Row>\n                    <Col style={{ textAlign: 'right'}}>\n                      <div>Deaths:</div>\n                    </Col>\n                    <Col style={{textAlign: 'left'}}>\n                      <div><Badge variant=\"danger\">{this.addCommas(list.latest_data.deaths)}</Badge></div>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col style={{ textAlign: 'right'}}>\n                      <div>Recovered:</div>\n                    </Col>\n                    <Col style={{textAlign: 'left'}}>\n                      <div><Badge variant=\"success\">{this.addCommas(list.latest_data.recovered)}</Badge></div>\n                    </Col>\n                  </Row>\n                    \n                </Card.Body>\n              </Card>\n            </Container>\n            );\n        }else return <div></div>\n        })}\n      </div>\n        }\n      \n      </div>\n      \n    </div>\n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}